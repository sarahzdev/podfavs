{"version":3,"sources":["components/PodcastItem.js","components/FeaturedPodcasts.js","components/SearchBar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["PodcastItem","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","opacity","handleMouseEnter","bind","assertThisInitialized","handleMouseLeave","inherits","createClass","key","value","setState","aPodcast","podcast","react_default","a","createElement","Card","inverse","style","cardStyle","onMouseEnter","onMouseLeave","CardImg","src","imageUrl","backgroundColor","alt","CardImgOverlay","CardTitle","fontSize","color","name","CardText","href","url","linkStyle","Component","position","top","left","width","height","margin","FeaturedPodcasts","podcastList","map","CardDeck","cardDeckStyle","components_PodcastItem","id","display","alignItems","justifyContent","flex","flexFlow","library","add","faSearch","SearchBar","handleChange","handleSubmit","event","onHandleChange","target","preventDefault","onHandleSubmit","Container","barStyle","Form","inline","onSubmit","FormGroup","className","Label","for","formLabel","Input","type","placeholder","userInput","onChange","Button","react_fontawesome_index_es","icon","marginTop","marginBottom","Home","title","isLoading","_this2","fetch","then","response","json","data","content","_this3","encodeURI","console","log","divStyle","components_SearchBar","textDecoration","Row","components_FeaturedPodcasts","fontFamily","maxWidth","maxHeight","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAMaA,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,QAAS,GACxBR,EAAKS,iBAAmBT,EAAKS,iBAAiBC,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACxBA,EAAKY,iBAAmBZ,EAAKY,iBAAiBF,KAAtBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAJPA,EADrB,OAAAC,OAAAY,EAAA,EAAAZ,CAAAJ,EAAAC,GAAAG,OAAAa,EAAA,EAAAb,CAAAJ,EAAA,EAAAkB,IAAA,mBAAAC,MAAA,WASIb,KAAKc,SAAS,SAAAV,GAAK,MAAK,CACtBC,QAAS,OAVf,CAAAO,IAAA,mBAAAC,MAAA,WAeIb,KAAKc,SAAS,SAAAV,GAAK,MAAK,CACtBC,QAAS,OAhBf,CAAAO,IAAA,SAAAC,MAAA,WAqBI,IAAME,EAAWf,KAAKJ,MAAMoB,QAE5B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAO,EACbC,MAAOC,EACPC,aAAcxB,KAAKM,iBACnBmB,aAAczB,KAAKS,kBACjBQ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAASC,IAAKZ,EAASa,SAAUN,MAAO,CAACO,gBAAiB,eAAgBC,IAAI,mBAC9Eb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAgBT,MAAO,CAAEO,gBAAiB,UAAWxB,QAASL,KAAKI,MAAMC,UACvEY,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWV,MAAO,CAAEW,SAAU,QAASC,MAAO,UAAW7B,QAASL,KAAKI,MAAMC,UAAYU,EAASoB,MAClGlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KAAUnB,EAAAC,EAAAC,cAAA,KAAGkB,KAAMtB,EAASuB,IAAKhB,MAAOiB,GAA9B,iBAGdtB,EAAAC,EAAAC,cAAA,gBAnCRzB,EAAA,CAAiC8C,aA6C3BD,EAAY,CAChBE,SAAU,WACVC,IAAK,QACLC,KAAM,SAOFpB,EAAY,CAChBqB,MAAO,QACPC,OAAQ,QACRC,OAAQ,UAGKpD,IC7DTqD,mLAIF,OAAO/C,KAAKJ,MAAMoD,YAAYC,IAAI,SAAAjC,GAAO,OACvCC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAU5B,MAAO6B,GACflC,EAAAC,EAAAC,cAACiC,EAAD,CAAaxC,IAAKI,EAAQqC,GAAIrC,QAASA,cANhBwB,aAgBzBW,EAAgB,CAEpBG,QAAS,OACTC,WAAY,SACZC,eAAgB,eAChBC,KAAM,OACNC,SAAU,WACVZ,OAAQ,UAGKC,oFC1BfY,IAAQC,IAAIC,KAGL,IAAMC,EAAb,SAAAnE,GACE,SAAAmE,EAAYlE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8D,IACjBjE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgE,GAAA3D,KAAAH,KAAMJ,KACDmE,aAAelE,EAAKkE,aAAaxD,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKmE,aAAenE,EAAKmE,aAAazD,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHHA,EADrB,OAAAC,OAAAY,EAAA,EAAAZ,CAAAgE,EAAAnE,GAAAG,OAAAa,EAAA,EAAAb,CAAAgE,EAAA,EAAAlD,IAAA,eAAAC,MAAA,SAOeoD,GACXjE,KAAKJ,MAAMsE,eAAeD,EAAME,OAAOtD,SAR3C,CAAAD,IAAA,eAAAC,MAAA,SAWeoD,GACXA,EAAMG,iBACNpE,KAAKJ,MAAMyE,mBAbf,CAAAzD,IAAA,SAAAC,MAAA,WAiBI,OACEI,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAWhD,MAAOiD,GAChBtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAMC,QAAM,EAACC,SAAU1E,KAAKgE,cAC1B/C,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAWC,UAAU,wBACnB3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOC,IAAI,WAAWxD,MAAOyD,GAA7B,mCADF,YAKE9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACEC,KAAK,SACL9C,KAAK,SACLkB,GAAG,WACH6B,YAAY,+BAEZrE,MAAOb,KAAKJ,MAAMuF,UAClBC,SAAUpF,KAAK+D,gBAGnB9C,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAQ/D,MAAO,CAAEO,gBAAiB,YAAaZ,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAiBC,KAAK,kBAnC/EzB,EAAA,CAA+BtB,aA0CzB+B,EAAW,CAEfiB,UAAW,OACXC,aAAc,QAGVV,EAAY,CAChB9C,SAAU,QACVC,MAAO,WAGM4B,ICvDT4B,cACJ,SAAAA,EAAY9F,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0F,IACjB7F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4F,GAAAvF,KAAAH,KAAMJ,KACDQ,MAAQ,CAAE4C,YAAa,GAAImC,UAAW,GAAIQ,MAAO,oBAAqBC,WAAW,GACtF/F,EAAKkE,aAAelE,EAAKkE,aAAaxD,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKmE,aAAenE,EAAKmE,aAAazD,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAJHA,mFAOC,IAAAgG,EAAA7F,KAClBA,KAAKc,SAAS,CAAE8E,WAAW,IAC3BE,MAAM,QACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAK/E,SAAS,CAAEkC,YAAakD,EAAKC,QAASP,WAAW,2CAG3DT,GACXnF,KAAKc,SAAS,CAAEqE,UAAWA,2CAGd,IAAAiB,EAAApG,KACTsC,EAAM,cAAgB+D,UAAUrG,KAAKI,MAAM+E,WAC/CmB,QAAQC,IAAIjE,GACZwD,MAAMxD,GACHyD,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIE,EAAKtF,SAAS,CAAEkC,YAAakD,EAAMP,MAAO,+DAI1D,OAAI3F,KAAKI,MAAMwF,UACN3E,EAAAC,EAAAC,cAAA,uBAGPF,EAAAC,EAAAC,cAAA,OAAKG,MAAOkF,GACVvF,EAAAC,EAAAC,cAACsF,EAAD,CACAtB,UAAWnF,KAAKI,MAAM+E,UACtBjB,eAAgBlE,KAAK+D,aACrBM,eAAgBrE,KAAKgE,eACrB/C,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACErD,EAAAC,EAAAC,cAAA,MAAIG,MAAO,CAAEoF,eAAgB,sBAAwB1G,KAAKI,MAAMuF,OAChE1E,EAAAC,EAAAC,cAACwF,EAAA,EAAD,KACE1F,EAAAC,EAAAC,cAACyF,EAAD,CAAkB5D,YAAahD,KAAKI,MAAM4C,wBAxCnCR,aAgDbgE,EAAW,CAEftE,MAAO,UACP2E,WAAY,+BACZC,SAAU,OACVC,UAAW,QAGErB,4BC3CAsB,mLAVX,OACE/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,KACEhG,EAAAC,EAAAC,cAAC+F,EAAA,EAAD,KACEjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,aALhClD,aCIE+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAO5G,EAAAC,EAAAC,cAAC2G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.2a118eaf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, CardImg, CardImgOverlay, CardTitle, CardText } from \"reactstrap\";\r\nimport \"../App.css\";\r\n\r\n// A card that provides information about a podcast.\r\nexport class PodcastItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { opacity: 0 };\r\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n  }\r\n\r\n  handleMouseEnter() {\r\n    this.setState(state => ({\r\n      opacity: 1\r\n    }));\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    this.setState(state => ({\r\n      opacity: 0\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const aPodcast = this.props.podcast;\r\n\r\n    return (\r\n      <div>\r\n        <Card inverse \r\n        style={cardStyle} \r\n        onMouseEnter={this.handleMouseEnter}\r\n        onMouseLeave={this.handleMouseLeave}>\r\n          <CardImg src={aPodcast.imageUrl} style={{backgroundColor: 'transparent'}} alt=\"Card image cap\"/>\r\n          <CardImgOverlay style={{ backgroundColor: \"#01172F\", opacity: this.state.opacity }}>\r\n            <CardTitle style={{ fontSize: \"1.1em\", color: \"#C9E4E7\", opacity: this.state.opacity }}>{aPodcast.name}</CardTitle>\r\n            <CardText><a href={aPodcast.url} style={linkStyle}>Learn more</a></CardText>\r\n          </CardImgOverlay>\r\n        </Card>\r\n        <br/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPodcastItem.propTypes = {\r\n  podcast: PropTypes.object.isRequired\r\n};\r\n\r\nconst linkStyle = {\r\n  position: 'absolute',\r\n  top: '150px',\r\n  left: '100px'\r\n  /* \r\n  <CardTitle>{aPodcast.name}</CardTitle>\r\n  <CardText>{aPodcast.description}</CardText>\r\n  <CardText>{aPodcast.rating} out of 5</CardText> </CardImgOverlay>*/\r\n}\r\n\r\nconst cardStyle = {\r\n  width: \"200px\",\r\n  height: \"200px\",\r\n  margin: \"0 auto\"\r\n};\r\n\r\nexport default PodcastItem;\r\n","import React, { Component } from \"react\";\r\nimport { CardDeck } from \"reactstrap\";\r\nimport PodcastItem from \"./PodcastItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//Render a list of podcasts.\r\nclass FeaturedPodcasts extends Component {\r\n  \r\n  render() {\r\n    // populate the table with podcast components\r\n    return this.props.podcastList.map(podcast => (\r\n      <CardDeck style={cardDeckStyle}>\r\n        <PodcastItem key={podcast.id} podcast={podcast} />\r\n      </CardDeck>\r\n    ));\r\n  }\r\n}\r\n\r\nFeaturedPodcasts.propTypes = {\r\n  podcastList: PropTypes.array.isRequired\r\n};\r\n\r\nconst cardDeckStyle = {\r\n  //backgroundColor: \"#FED766\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-around\",\r\n  flex: \"auto\",\r\n  flexFlow: \"row wrap\",\r\n  margin: \"0 auto\"\r\n};\r\n\r\nexport default FeaturedPodcasts;\r\n","import React, { Component } from \"react\";\r\nimport { Container, Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faSearch);\r\n\r\n// Allow the user to get podcast recommendations by inputting keywords.\r\nexport class SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.props.onHandleChange(event.target.value);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.props.onHandleSubmit();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container style={barStyle}>\r\n        <Form inline onSubmit={this.handleSubmit}>\r\n          <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n            <Label for=\"searchIt\" style={formLabel}>\r\n            Find your new favorite podcast. \r\n            </Label>\r\n            &nbsp; &nbsp;\r\n            <Input\r\n              type=\"search\"\r\n              name=\"search\"\r\n              id=\"searchIt\"\r\n              placeholder=\"Search by title, keywords...\"\r\n              //size=\"40\"\r\n              value={this.props.userInput}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <Button style={{ backgroundColor: \"#007FFF\" }}><FontAwesomeIcon icon=\"search\" /></Button>\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst barStyle = {\r\n  //backgroundColor: \"#D7B49E\",\r\n  marginTop: '20px',\r\n  marginBottom: '40px'\r\n};\r\n\r\nconst formLabel = {\r\n  fontSize: '2.5em',\r\n  color: '#007FFF'\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport FeaturedPodcasts from \"./FeaturedPodcasts\";\r\nimport { Container, Row } from \"reactstrap\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\n// Landing page with a search bar and default list of podcasts.\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { podcastList: [], userInput: '', title: 'Featured podcasts', isLoading: true };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true });\r\n    fetch(\"api/\")\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ podcastList: data.content, isLoading: false }));\r\n  }\r\n\r\n  handleChange(userInput) {\r\n    this.setState({ userInput: userInput });\r\n  }\r\n\r\n  handleSubmit() {\r\n    var url = \"api/search/\" + encodeURI(this.state.userInput);\r\n    console.log(url);\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ podcastList: data, title: 'Podcasts you might like' }));\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n    return (\r\n      <div style={divStyle}>\r\n        <SearchBar \r\n        userInput={this.state.userInput}\r\n        onHandleChange={this.handleChange}\r\n        onHandleSubmit={this.handleSubmit} />\r\n        <Container>\r\n          <h2 style={{ textDecoration: \"underline #EA638C\" }}>{this.state.title}</h2>\r\n          <Row>\r\n            <FeaturedPodcasts podcastList={this.state.podcastList} />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst divStyle = {\r\n  //backgroundColor: \"#B8D5B8\",\r\n  color: '#2B303A',\r\n  fontFamily: \"houschka-rounded, sans-serif\",\r\n  maxWidth: \"100%\",\r\n  maxHeight: \"100%\"\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faIgloo } from '@fortawesome/free-solid-svg-icons';\n\n// Route renders UI when app location matches the path\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/' exact={true} component={Home}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}